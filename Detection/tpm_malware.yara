import "pe"
import "elf"
import "math"

rule ExecutablePE: info executable windows
{
	condition:
        pe.is_pe
}


rule ExecutableELF: info executable linux
{
	condition:
        elf.machine == elf.EM_X86_64
}

rule ContainsTPMString
{
    strings:
        $tpm = "tpm" nocase
        $tpm2 = "tpm2.0" nocase
        $tpm20 = "tpm20" nocase
    
    condition:
        $tpm or $tpm2 or $tpm20

}

rule ContainsTPMDeviceStringLinux
{
    meta:
        description = "Checks for the string path to the tpm device which linux applications use"
    strings:
        $tpm_linux = /dev\/tpm[0-9]+/ 
        $tpmrm_linux = /dev\/tpmrm[0-9]+/
    condition:
        $tpm_linux or $tpmrm_linux
}

rule ImportsTBSDLLStringWindows
{
    meta:
        description = "Checks for the Tbs.dll import which is used when application requires TPM access"
    strings:
        $tbs_dll = "Tbs.dll" nocase
    condition:
        pe.imports("Tbs.dll") or $tbs_dll
}

rule YaegiCodeEval
{
    meta:
        description = "Checks if yaegi is used in the program"
    strings:
		$s1 = "Go build"
		$s2 = "go.build"
		$go = "/go-"
        $yaegi_eval = "github.com/traefik/yaegi/interp.(*Interpreter).Eval"
    condition:
        (any of ($s*) or #go > 10) and $yaegi_eval
}

// From https://github.com/Yara-Rules/rules
rule network_tcp_socket {
    meta:
        author = "x0r"
        description = "Communications over RAW socket"
	version = "0.1"
    strings:
	$f1 = "Ws2_32.dll" nocase
        $f2 = "wsock32.dll" nocase
        $c1 = "WSASocket"
        $c2 = "socket"
        $c3 = "send"
        $c4 = "WSASend"
        $c5 = "WSAConnect"
        $c6 = "connect"
        $c7 = "WSAStartup"
        $c8 = "closesocket"
        $c9 = "WSACleanup"
    condition:
        1 of ($f*) and 2 of ($c*)
}

rule IP {
    meta:
        author = "Antonio S. <asanchez@plutec.net>"
    strings:
        $ipv4 = /([0-9]{1,3}\.){3}[0-9]{1,3}/ wide ascii
        $ipv6 = /(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))/ wide ascii
    condition:
        any of them
}





